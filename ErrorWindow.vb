Imports System.IO
Imports System.Runtime.InteropServices
Imports System.Security.Permissions
Imports System.Text.RegularExpressions
Imports System.Windows.Forms
<PermissionSet(SecurityAction.Demand, Name:="FullTrust")>
<ComVisibleAttribute(True)>
Public Class ErrorWindow
    Public Shared exceptionData As Exception

    Private Sub ErrorWindow_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Dim menu As New Windows.Forms.ContextMenu()
        menu.MenuItems.Add("none")
        widget.ContextMenu = menu
        Me.TopMost = True
        widget.ObjectForScripting = Me
        Dim html = "<html>
                       <head>
                           <style>
                            .button{
                                float:right;
                                margin-left:10px
                            }
                            .monospace {
                                font-family: 'Lucida Console', Courier, monospace;
                            }
                            #title{
                                float:left
                            }
                            .msg{
                                display: none
                            }
                            #dsc {
                                padding-top: 0px;
                                padding-bottom: 5px;
                            }
                            img {
                              float: left;
                            }
                           pre {
                                white-space: pre-wrap; 
                                word-wrap: break-word;
                            }
                            </style>
                       </head>
                       <body>
                           <div style='clear both;'>
                               <h1 id='title'> An unhandled exception occured! </h1>
                               <button class='button' onclick='window.external.Close()'>
                                    Attempt to continue
                                </button>
                               <button class='button' onclick='window.external.CloseProgram()'>
                                    Close the program
                                </button>
                               <button class='button' onclick='window.external.Save()'>
                                    Save this page
                                </button>
                           </div>
                           <br/>
                           <br/>
                           <hr/>
                           <table style='width: 100 %; '>
                               <tbody>
                                   <tr>
                                       <td style='width: 8 %; '>
                                           <img src='http://icons.iconarchive.com/icons/paomedia/small-n-flat/256/sign-error-icon.png' width='64' height='64'/>
                                       </td>
                                       <td>
                                           <p><b>Bannerlord has encountered a problem and needs to close. We are sorry for the inconvenience. </b><br/>
                                          If you were in the middle of something, the progress you were working on might be lost.<br/>
                                          This error can be caused by a faulty module XMLs, manifest (submodule.xml), or DLL (bad one or permission error).<br/><br/>
                                          If you have <a href='https://github.com/admiralnelson/bannerlord-error-detector/issues/2'><b>Community Patch</b></a> installed, please click <a href='#' onclick='window.external.Close()'>Attempt to Continue</a> in order to capture logs that will be generated by it. <br/>
                                          Or If you're debugging, you can disable the error window individually in <a href='#' onclick='window.external.OpenConfig()'><b>config.json</b></a> in BetterExceptionWindow submodule folder.
                                       </p>
                                       </td>
                                   </tr>
                               </tbody>
                           </table>
                           <br/>
                           <h2>
                               <a href='#' onclick='showFaultingProcedure(this, ""Reasons"" ,""reason"")'>
                                + Reason
                            </a>
                           </h2>
                           <div class='msg' id='reason'>
                                Source: <span>{faultingSource}</span>
                               <p class='monospace' id='reasonPre'>
                                    {errorString}
                               </p>
                           </div>
                           <h2>
                               <a href='#' onclick='showFaultingProcedure(this, ""Inner exception"" ,""innerexcept"")'>
                                + Inner exception
                            </a>
                           </h2>
                           <div class='msg' id='innerexcept'>
                                Source: <span>{innerFaultingSource}</span>
                               <p class='monospace' id='reasonPre'>
                                    {innerException}
                               </p>
                           </div>
                           <h2>
                               <a href='#' onclick='showFaultingProcedure(this, ""Callstacks"" ,""fullStack"")'>
                                + Callstacks
                                </a>
                           </h2>
                           <div class='msg' id='fullStack'>
                               <p><b>Protip: </b>
                                Use a debugger like <a href='https://github.com/0xd4d/dnSpy'>dnSpy</a> or 
                                <a href='https://visualstudio.microsoft.com/'>Visual studio</a> to trace the source of error, by stepping the program
                                line by line.
                                </p>
                                Inner exception callstack:
                                <pre>{innerExceptionCallStack}</pre>
                                Outer exception callstack:
                                <pre>{fullStackString}</pre>
                           </div>
                           <h2>
                               <a href='#' onclick='showFaultingProcedure(this, ""Installed mods"" ,""mods"")'>
                                + Loaded DLLs by mods
                                </a>
                           </h2>
                           <div class='msg' id='mods'>
                               <p><input type='checkbox' onclick='hide(this)'/> Hide taleworlds dll </p>
                               <ul>{installedMods}</ul>
                           </div>
                           <script>
                            if (!document.getElementsByClassName) {
                              document.getElementsByClassName = function(search) {
                                var d = document, elements, pattern, i, results = [];
                                if (d.querySelectorAll) { // IE8
                                  return d.querySelectorAll(""."" + search);
                                }
                                if (d.evaluate) { // IE6, IE7
                                  pattern = "".//*[contains(concat(' ', @class, ' '), ' "" + search + "" ')]"";
                                  elements = d.evaluate(pattern, d, null, 0, null);
                                  while ((i = elements.iterateNext())) {
                                    results.push(i);
                                  }
                                } else {
                                  elements = d.getElementsByTagName(""*"");
                                  pattern = new RegExp(""(^|\\s)"" + search + ""(\\s|$)"");
                                  for (i = 0; i < elements.length; i++) {
                                    if ( pattern.test(elements[i].className) ) {
                                      results.push(elements[i]);
                                    }
                                  }
                                }
                                return results;
                              }
                            }
                            function showFaultingProcedure(e, msg, el)
                            {
                                if (document.getElementById(el).style.display == 'block') 
                                {
                                    document.getElementById(el).style.display = 'none';
                                    e.innerHTML = '+ ' + msg
                                }
                                else
                                {
                                    document.getElementById(el).style.display = 'block';
                                    e.innerHTML = '- ' + msg
                                }
                            }
                           function hide(e)
                            {
                                var list = document.getElementsByClassName('taleworlds_ul')
                                for(var i=0; i < list.length; i++)
                                {
                                    list[i].style.display = (e.checked) ? 'none' :  'list-item';
                                }
                            }
                           </script>
                       </body>
                   </html>"
        html = html.Replace("{errorString}", exceptionData.Message)
        html = html.Replace("{faultingSource}", exceptionData.Source)
        html = html.Replace("{fullStackString}", exceptionData.StackTrace)
        Dim installedMods = ""
        Dim listOfInstalledMods = GetAssembliesList(False)
        For Each x In listOfInstalledMods
            installedMods = installedMods + x
        Next
        html = html.Replace("{installedMods}", installedMods)
        If exceptionData.InnerException IsNot Nothing Then
            html = html.Replace("{innerException}", exceptionData.InnerException.Message)
            html = html.Replace("{innerFaultingSource}", exceptionData.InnerException.Source)
            html = html.Replace("{innerExceptionCallStack}", exceptionData.InnerException.StackTrace)
        Else
            html = html.Replace("{innerException}", "No inner exception was thrown")
            html = html.Replace("{innerFaultingSource}", "No module")
            html = html.Replace("{innerExceptionCallStack}", "No inner exception was thrown")
        End If

        widget.DocumentText = html
    End Sub

    Public Sub Save()
        Dim filename = Str(DateTime.Now.ToFileTimeUtc()) + ".htm"
        File.WriteAllText(filename, widget.DocumentText)
        Dim filePath = Path.GetFullPath(SaveLogPath + filename)
        MessageBox.Show(filePath, "Saved to")
    End Sub

    Public Sub CloseProgram()
        Dim pid = Process.GetCurrentProcess().Id
        Dim proc As Process = Process.GetProcessById(pid)
        proc.Kill()
    End Sub

    Public Sub OpenConfig()
        Try
            Dim p = Path.GetFullPath("..\..\Modules\BetterExceptionWindow\config.json")
            Process.Start(p)
        Catch ex As Exception

        End Try
    End Sub

    Public Sub OpenPath(s As String)
        Dim p = Path.GetDirectoryName(s)
        Process.Start(p)
    End Sub

    Private Function GetAssembliesList(searchAlsoInGameBins As Boolean) As List(Of String)
        Dim asm = AppDomain.CurrentDomain.GetAssemblies()
        Dim out As New List(Of String)
        For Each x In asm
            Try
                If Not x.Location.ToLower().Contains("Mount & Blade II Bannerlord".ToLower()) Then
                    Continue For
                End If
                Dim name = x.GetName().Name
                Dim assmeblyVer = x.GetName().Version
                Dim location = x.Location
                Dim link = x.Location.Replace("\", "\\")
                Dim checksum = CalculateMD5(location)
                Dim li = $"Assembly {name}, checksum: {checksum}. Location: <a href='#' onclick='window.external.OpenPath(""{link}"")'>{location}</a>"
                Dim output = ""
                If name.StartsWith("TaleWorlds") Or
                    name.StartsWith("SandBox") Or
                    name.StartsWith("StoryMode") Or
                    name.StartsWith("Steamworks") Then
                    output = $"<li class='taleworlds_ul'>{li}</li>" & vbNewLine
                Else
                    output = $"<li>{li}</li>" & vbNewLine
                End If
                out.Add(output)
            Catch ex As Exception

            End Try
        Next
        Return out
    End Function

    Private Sub widget_Navigating(sender As Object, e As WebBrowserNavigatingEventArgs) Handles widget.Navigating
        Dim isUri = Uri.IsWellFormedUriString(e.Url.ToString(), UriKind.RelativeOrAbsolute)
        If (isUri AndAlso (e.Url.ToString().StartsWith("http://") Or e.Url.ToString().StartsWith("https://"))) Then
            e.Cancel = True
            Try
                Process.Start(e.Url.ToString())
            Catch ex As Exception
            End Try
            Exit Sub
            Try
                Process.Start("firefox.exe", e.Url.ToString())
            Catch ex As Exception
            End Try
            Exit Sub
            Try
                Process.Start("chrome.exe", e.Url.ToString())
            Catch ex As Exception
            End Try
        End If

    End Sub
End Class