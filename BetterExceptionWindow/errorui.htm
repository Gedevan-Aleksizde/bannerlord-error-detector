<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
    <style>
        .button {
            float: right;
            margin-left: 10px
        }

        .monospace {
            font-family: 'Lucida Console', Courier, monospace;
        }

        #title {
            float: left
        }

        .msg {
            display: none
        }

        #dsc {
            padding-top: 0px;
            padding-bottom: 5px;
        }

        img {
            float: left;
        }

        pre {
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        .border-blue {
            padding: 5px;
            background-color: lightblue;
            border: 1px solid darkblue;
            position: relative;
            min-height: 48px;
            margin-top: 10px;
            margin-bottom: 10px;
        }

        .mod-list, .harmony-list {
            margin: 5px;
            background-color: whitesmoke;
            border: 1px solid grey;
            padding: 5px;
        }

        .mod-list-tw {
            margin: 5px;
            background-color: whitesmoke;
            border: 1px solid grey;
            padding: 5px;
        }

        .mod-list-unloaded {
            margin: 5px;
            background-color: whitesmoke;
            border: 1px solid grey;
            padding: 5px;
            color: grey
        }

        #xml-report-table {
            border-collapse: collapse;
        }

        td {
            vertical-align: middle
        }

        #bewVersion {
            font-size: small;
            color: darkgrey;
        }

        table {
            border-collapse: collapse;
            width: 100%;
        }

        td, th {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }

        .troubleshoot-buttons {
            position: absolute;
            right: 5px;
            top: 5px;
        }
        .troubleshoot-desc {
            max-width: 80%    ;
        }

        .progressbar {
            min-height: 1em;
            max-height: 1em;
            max-width: 100%;
            width: 0%;
            background: darkgreen;
            padding: 5px;
            margin: -5px;
            color: white;
            text-shadow: 1px 1px 1px grey;
        }
    </style>
</head>
<body>
    <div style='clear:both;'>
        <h1 id='title'> An unhandled exception occured! </h1>
        <button class='button' onclick='window.external.Close()'>
            Attempt to continue
        </button>
        <button class='button' onclick='window.external.CloseProgram()'>
            Close the program
        </button>
        <button class='button' onclick='SavePage()'>
            Save/Print this page
        </button>
    </div>
    <br />
    <br />
    <hr />
    <table style='width: 100%; border: none '>
        <tbody>
            <tr>
                <td style='width: 64px; border: none '>
                    <img src='http://icons.iconarchive.com/icons/paomedia/small-n-flat/256/sign-error-icon.png' width='64' height='64' />
                </td>
                <td style='border: none'>
                    <p>
                        <b>Bannerlord has encountered a problem and needs to close. We are sorry for the inconvenience. </b><br />
                        If you were in the middle of something, the progress you were working on might be lost.<br /><br />

                        This error can be caused by a faulty XMLs, manifest (submodule.xml), corrupted save game, module, or programming errors.<br />
                        If this keeps happening, consider saving the error report and send it to the module authors or run a <a href="#troubleshoot" onclick="OpenTroubleshootSection()">troubleshoot</a> to solve the issues.<br /><br />

                        You can disable the error window individually in <a href='#' onclick='window.external.OpenConfig()'><b>config.json</b></a> in BetterExceptionWindow submodule folder.
                    </p>
                </td>
            </tr>
        </tbody>
    </table>
    <br />
    <h2 name='reason'>
        <a href='#reason' onclick='spoiler(this, "Reasons" ,"reason")'>
            + Reason
        </a>
    </h2>
    <div class='msg' id='reason'>
        Source: <span>{faultingSource}</span>
        <p class='monospace' id='reasonPre'>
            {errorString}
        </p>
    </div>
    <h2 name='innerexcept'>
        <a href='#innerexcept' onclick='spoiler(this, "Inner exception" ,"innerexcept")'>
            + Inner exception
        </a>
    </h2>
    <div class='msg' id='innerexcept'>
        Source: <span>{innerFaultingSource}</span>
        <p class='monospace' id='reasonPre'>
            {innerException}
        </p>
    </div>
    <h2 name='fullStack'>
        <a href='#fullStack' onclick='spoiler(this, "Callstacks" ,"fullStack")'>
            + Callstacks
        </a>
    </h2>
    <div class='msg' id='fullStack'>
        <p>
            <b>Protip: </b>
            Use a debugger like <a href='https://github.com/dnSpy/dnSpy'>dnSpy</a> or
            <a href='https://visualstudio.microsoft.com/'>Visual studio</a> to trace the source of error, by stepping the program
            line by line.
            <a href="#dnspy" onclick="OpenTroubleshootSection()">You can restart with dnSpy attached.</a>
        </p>
        Inner exception callstack:
        <pre>{innerExceptionCallStack}</pre>
        Outer exception callstack:
        <pre>{fullStackString}</pre>
    </div>
    <h2 name='mods'>
        <a href='#mods' onclick='spoiler(this, "Installed mods" ,"mods")'>
            + Installed mods
        </a>
    </h2>
    <div class='msg' id='mods'>
        <p><input type='checkbox' onclick='hideTWMods(this)' /> Hide taleworlds mods </p>
        <p><input type='checkbox' onclick='hideUnloadedMods(this)' /> Hide unloaded mods</p>
        <div id="mod-container">

        </div>
    </div>
    <h2 name='loaded-dll'>
        <a href='#loaded-dll' onclick='spoiler(this, "Loaded DLLs" ,"dll")'>
            + Loaded DLLs
        </a>
    </h2>
    <div class='msg' id='dll'>
        <p><input type='checkbox' onclick='hide(this)' /> Hide taleworlds dll </p>
        <ul>
            {installedMods}
        </ul>
    </div>
    <h2 name="rgl">
        <a href='#rgl-log' onclick='spoiler(this, "Game Engine Log" ,"rgl-log")'>
            + Game Engine Logs
        </a>
    </h2>
    <div class='msg' id='rgl-log'>
        <p>
            <img src="https://icons.iconarchive.com/icons/dtafalonso/modern-xp/256/ModernXP-43-Date-New-icon.png" width="64" height="64" />
            Recorded logs from the game engine (RGL). Taken at {logtime}
        </p>
        <br />
        <pre>{gameLogs}</pre>
    </div>
    <h2 name="harmony">
        <a href='#harmony-log' onclick='spoiler(this, "Harmony Patches" ,"harmony")'>
            + Harmony Patches
        </a>
    </h2>
    <div class='msg' id='harmony'>
        <div id="harmony-container">

        </div>
    </div>
    <h2 name="troubleshoot">
        <a href='#troubleshoot' onclick='spoiler(this, "Troubleshoot" ,"troubleshoot-expanded")' id="troubleshoot">
            + Troubleshoot
        </a>
    </h2>
    <div class='msg' id='troubleshoot-expanded'>
        <p>You can try several troubleshoot options down below.</p>
        <div class='border-blue' id='xml-report'>
            <img src='http://icons.iconarchive.com/icons/dtafalonso/modern-xp/512/ModernXP-64-Folder-Check-icon.png' width='48' />
            <div class="troubleshoot-desc">
                Check for XML typos if an error were caused by faulty XMLs, tap the button on the right to validate them.
            </div>
            <button onclick='validateXML(this)' id='btn-validate-xml' class="troubleshoot-buttons">Check XML validity</button>
            <br />
            <br />
            <table id='xml-report-table' style='width:100%; display:none; border:none' border='0'>
                <tr>
                    <td style='width:30px'><img src='http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png' width='24' /> </td>
                    <td>
                        Submodule.xml <br />
                        Location: <a href='#' onclick='test()'>C:\FILE\Submodule.xml</a>
                        Location: <a href='#' onclick='stopsearch()'>C:\FILE\Submodule.xml</a>
                        Location: <a href='#' onclick='clearTable()'>C:\FILE\Submodule.xml</a>
                    </td>
                </tr>
            </table>
        </div>
        <div class='border-blue'>
            <img src='https://icons.iconarchive.com/icons/dtafalonso/modern-xp/512/ModernXP-21-Desktop-icon.png' width='48' />
            <div class="troubleshoot-desc">
                Attempt to disable faulty mods. This option may only work with the original Taleworlds Launcher.
            </div>
            <br />
            <br />
            <button class="troubleshoot-buttons" onclick="window.external.DisableProblematicModules()">Disable them</button>
        </div>
        <div class='border-blue' id="emergency-save">
            <img src='http://icons.iconarchive.com/icons/dtafalonso/modern-xp/512/ModernXP-65-Floppy-Save-icon.png' width='48' />
            <div class="troubleshoot-desc">
                Emergency save. <br />
                Forcefully to save the game. Keep in mind there are some cases where this is not possible to do.
                <div id="save-reason">

                </div>
            </div>
            <br />
            <br />
            <button class="troubleshoot-buttons" onclick="saveEmergencyCampaign()" id="savegameButton" disabled>Save the game</button>
        </div>
        <div class='border-blue' id="dnspy">
            <img src='http://icons.iconarchive.com/icons/dtafalonso/modern-xp/512/ModernXP-70-Window-Settings-icon.png' width='48' />
            <div class="troubleshoot-desc">
                Restart the program in debug mode. <br />
                Restart the program with dnSpy debugger and decompiler attached. This may helps you debug and even made patches to a faulty mod without a source code. <a href="https://github.com/dnSpy/dnSpy">What is dnSpy?</a> <br />
                It will disable BetterExceptionWindow temporarily until the next game restart.
                <div style="display:normal" id="dnspyInstall">
                    <div id="dnspyReason">Dnspy is not installed.</div> <br />
                    <a href="#dnspy" onclick="InstallDnspy()" id="dnspyInstallLink">Install dnSpy</a>
                </div>
            </div>
            <br />
            <br />
            <div class="progressbar" id="dnspyProgressbar" style="display:none">Installing...(0000000K/000000K)</div>
            <button class="troubleshoot-buttons" onclick="StartDnspy()" id="dnspyButton" disabled>Restart the program with dnSpy attched</button>
        </div>
    </div>
    <div id="jsonData" style="display:none">
        {jsonData}
    </div>
    <div id="harmonyData" style="display:none">
        {jsonHarmony}
    </div>
    <div id="takenTroubleshootActions" style="display:none">
        {jsonTroubleshoot}
    </div>
    <div id="saveblobsBase64" style="display:none">
        work in progress
    </div>
    <hr />
    <small id="bewVersion">Generated by BetterExceptionWindow version 3.1.0 1b063f4181eaaaf0c989150001127f7cfafb4656 </small>
    <script>
        //https://github.com/douglascrockford/JSON-js/blob/master/json2.js
        if (typeof JSON !== "object") {
            JSON = {};
        }

        (function () {
            "use strict";

            var rx_one = /^[\],:{}\s]*$/;
            var rx_two = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
            var rx_three = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
            var rx_four = /(?:^|:|,)(?:\s*\[)+/g;
            var rx_escapable = /[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
            var rx_dangerous = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;

            function f(n) {
                // Format integers to have at least two digits.
                return (n < 10)
                    ? "0" + n
                    : n;
            }

            function this_value() {
                return this.valueOf();
            }

            if (typeof Date.prototype.toJSON !== "function") {

                Date.prototype.toJSON = function () {

                    return isFinite(this.valueOf())
                        ? (
                            this.getUTCFullYear()
                            + "-"
                            + f(this.getUTCMonth() + 1)
                            + "-"
                            + f(this.getUTCDate())
                            + "T"
                            + f(this.getUTCHours())
                            + ":"
                            + f(this.getUTCMinutes())
                            + ":"
                            + f(this.getUTCSeconds())
                            + "Z"
                        )
                        : null;
                };

                Boolean.prototype.toJSON = this_value;
                Number.prototype.toJSON = this_value;
                String.prototype.toJSON = this_value;
            }

            var gap;
            var indent;
            var meta;
            var rep;


            function quote(string) {

                // If the string contains no control characters, no quote characters, and no
                // backslash characters, then we can safely slap some quotes around it.
                // Otherwise we must also replace the offending characters with safe escape
                // sequences.

                rx_escapable.lastIndex = 0;
                return rx_escapable.test(string)
                    ? "\"" + string.replace(rx_escapable, function (a) {
                        var c = meta[a];
                        return typeof c === "string"
                            ? c
                            : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
                    }) + "\""
                    : "\"" + string + "\"";
            }


            function str(key, holder) {

                // Produce a string from holder[key].

                var i;          // The loop counter.
                var k;          // The member key.
                var v;          // The member value.
                var length;
                var mind = gap;
                var partial;
                var value = holder[key];

                // If the value has a toJSON method, call it to obtain a replacement value.

                if (
                    value
                    && typeof value === "object"
                    && typeof value.toJSON === "function"
                ) {
                    value = value.toJSON(key);
                }

                // If we were called with a replacer function, then call the replacer to
                // obtain a replacement value.

                if (typeof rep === "function") {
                    value = rep.call(holder, key, value);
                }

                // What happens next depends on the value's type.

                switch (typeof value) {
                    case "string":
                        return quote(value);

                    case "number":

                        // JSON numbers must be finite. Encode non-finite numbers as null.

                        return (isFinite(value))
                            ? String(value)
                            : "null";

                    case "boolean":
                    case "null":

                        // If the value is a boolean or null, convert it to a string. Note:
                        // typeof null does not produce "null". The case is included here in
                        // the remote chance that this gets fixed someday.

                        return String(value);

                    // If the type is "object", we might be dealing with an object or an array or
                    // null.

                    case "object":

                        // Due to a specification blunder in ECMAScript, typeof null is "object",
                        // so watch out for that case.

                        if (!value) {
                            return "null";
                        }

                        // Make an array to hold the partial results of stringifying this object value.

                        gap += indent;
                        partial = [];

                        // Is the value an array?

                        if (Object.prototype.toString.apply(value) === "[object Array]") {

                            // The value is an array. Stringify every element. Use null as a placeholder
                            // for non-JSON values.

                            length = value.length;
                            for (i = 0; i < length; i += 1) {
                                partial[i] = str(i, value) || "null";
                            }

                            // Join all of the elements together, separated with commas, and wrap them in
                            // brackets.

                            v = partial.length === 0
                                ? "[]"
                                : gap
                                    ? (
                                        "[\n"
                                        + gap
                                        + partial.join(",\n" + gap)
                                        + "\n"
                                        + mind
                                        + "]"
                                    )
                                    : "[" + partial.join(",") + "]";
                            gap = mind;
                            return v;
                        }

                        // If the replacer is an array, use it to select the members to be stringified.

                        if (rep && typeof rep === "object") {
                            length = rep.length;
                            for (i = 0; i < length; i += 1) {
                                if (typeof rep[i] === "string") {
                                    k = rep[i];
                                    v = str(k, value);
                                    if (v) {
                                        partial.push(quote(k) + (
                                            (gap)
                                                ? ": "
                                                : ":"
                                        ) + v);
                                    }
                                }
                            }
                        } else {

                            // Otherwise, iterate through all of the keys in the object.

                            for (k in value) {
                                if (Object.prototype.hasOwnProperty.call(value, k)) {
                                    v = str(k, value);
                                    if (v) {
                                        partial.push(quote(k) + (
                                            (gap)
                                                ? ": "
                                                : ":"
                                        ) + v);
                                    }
                                }
                            }
                        }


                        v = partial.length === 0
                            ? "{}"
                            : gap
                                ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}"
                                : "{" + partial.join(",") + "}";
                        gap = mind;
                        return v;
                }
            }


            if (typeof JSON.stringify !== "function") {
                meta = {    // table of character substitutions
                    "\b": "\\b",
                    "\t": "\\t",
                    "\n": "\\n",
                    "\f": "\\f",
                    "\r": "\\r",
                    "\"": "\\\"",
                    "\\": "\\\\"
                };
                JSON.stringify = function (value, replacer, space) {


                    var i;
                    gap = "";
                    indent = "";



                    if (typeof space === "number") {
                        for (i = 0; i < space; i += 1) {
                            indent += " ";
                        }


                    } else if (typeof space === "string") {
                        indent = space;
                    }


                    rep = replacer;
                    if (replacer && typeof replacer !== "function" && (
                        typeof replacer !== "object"
                        || typeof replacer.length !== "number"
                    )) {
                        throw new Error("JSON.stringify");
                    }

                    return str("", { "": value });
                };
            }



            if (typeof JSON.parse !== "function") {
                JSON.parse = function (text, reviver) {


                    var j;

                    function walk(holder, key) {

                        var k;
                        var v;
                        var value = holder[key];
                        if (value && typeof value === "object") {
                            for (k in value) {
                                if (Object.prototype.hasOwnProperty.call(value, k)) {
                                    v = walk(value, k);
                                    if (v !== undefined) {
                                        value[k] = v;
                                    } else {
                                        delete value[k];
                                    }
                                }
                            }
                        }
                        return reviver.call(holder, key, value);
                    }


                    text = String(text);
                    rx_dangerous.lastIndex = 0;
                    if (rx_dangerous.test(text)) {
                        text = text.replace(rx_dangerous, function (a) {
                            return (
                                "\\u"
                                + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                            );
                        });
                    }


                    if (
                        rx_one.test(
                            text
                                .replace(rx_two, "@")
                                .replace(rx_three, "]")
                                .replace(rx_four, "")
                        )
                    ) {

                        j = eval("(" + text + ")");
                        return (typeof reviver === "function")
                            ? walk({ "": j }, "")
                            : j;
                    }


                    throw new SyntaxError("JSON.parse");
                };
            }
        }());
    </script>
    <script>
        var TroubleshootAction = {
            ForceSave: false,
            XMLCheck: false
        }

        if (!document.getElementsByClassName) {
            document.getElementsByClassName = function (search) {
                var d = document, elements, pattern, i, results = [];
                if (d.querySelectorAll) { // IE8
                    return d.querySelectorAll("." + search);
                }
                if (d.evaluate) { // IE6, IE7
                    pattern = ".//*[contains(concat(' ', @class, ' '), ' " + search + " ')]";
                    elements = d.evaluate(pattern, d, null, 0, null);
                    while ((i = elements.iterateNext())) {
                        results.push(i);
                    }
                } else {
                    elements = d.getElementsByTagName("*");
                    pattern = new RegExp("(^|\\s)" + search + "(\\s|$)");
                    for (i = 0; i < elements.length; i++) {
                        if (pattern.test(elements[i].className)) {
                            results.push(elements[i]);
                        }
                    }
                }
                return results;
            }
        }
        if (typeof Array.isArray === 'undefined') {
            Array.isArray = function (obj) {
                return Object.prototype.toString.call(obj) === '[object Array]';
            }
        };
        function spoiler(e, msg, el) {
            if (document.getElementById(el).style.display == 'block') {
                document.getElementById(el).style.display = 'none';
                e.innerHTML = '+ ' + msg
            }
            else {
                document.getElementById(el).style.display = 'block';
                e.innerHTML = '- ' + msg
            }
        }
        function hide(e) {
            var list = document.getElementsByClassName('taleworlds_ul')
            for (var i = 0; i < list.length; i++) {
                list[i].style.display = (e.checked) ? 'none' : 'list-item';
            }
        }
        function hideUnloadedMods(e) {
            var list = document.getElementsByClassName('mod-list-unloaded')
            for (var i = 0; i < list.length; i++) {
                list[i].style.display = (e.checked) ? 'none' : 'block';
            }
        }
        function hideTWMods(e) {
            var list = document.getElementsByClassName('mod-list-tw')
            for (var i = 0; i < list.length; i++) {
                list[i].style.display = (e.checked) ? 'none' : 'block';
            }
        }
        function validateXML(e) {
            e.disabled = true;
            clearTable();
            var table = document.getElementById('xml-report-table'),
                xmlReport = document.getElementById('xml-report'),
                row = table.insertRow(0),
                icon = row.insertCell(0),
                desc = row.insertCell(1);
            icon.style.width = '30px';
            icon.innerHTML = '';
            desc.innerHTML = '<img id="search-icon" style="vertical-align:middle; float:none" src="http://fc06.deviantart.net/fs71/f/2012/331/f/4/windows_gif__searching_folder_files_by_timocop-d5mbp7w.gif" /><span id="scan-status" style="vertical-align: middle;">Checking file...</span>';
            table.style.display = 'block';
            xmlReport.style.backgroundColor = 'lightgoldenrodyellow';
            window.external.ScanAndLintXmls();
        }

        function doneScanning() {
            document.getElementById("search-icon").remove();
            document.getElementById("scan-status").innerText = "XML checks done.";
            TroubleshootAction.XMLCheck = true;

        }
        function saveEmergencyCampaign() {
            var result = confirm("Depending on the crash, the saved file could be on invalid state.\nOnly use this if the crash is not player data related (i.e crash was caused by user interface bugs, not player data or AI state related)\nContinue to forcefully save the game?");
            if (result) {
                var filename = prompt("Save as");
                if (!filename) {
                    alert("invalid name");
                }
                else {
                    if (window.external.ForceSave(filename)) {
                        alert("game saved as " + filename);
                    }
                }

            }

        }
        function clearTable() {
            var elmtTable = document.getElementById('xml-report-table');
            tableRows = elmtTable.getElementsByTagName('tr'),
                rowCount = tableRows.length;

            for (var x = 0; x < rowCount; x++) {
                elmtTable.deleteRow(0);
            }
        }
        function test() {
            addXMLDiagResult('FILE.xml', 'C:/FILE/FILE.xml', "invalid at line");
        }
        function stopsearch() {
            finishSearch(true);
        }
        function finishSearch(withError) {
            var xmlReport = document.getElementById('xml-report'),
                table = document.getElementById('xml-report-table'),
                searchBtn = document.getElementById('btn-validate-xml');
            xmlReport.style.backgroundColor = (withError) ? 'lightgoldenrodyellow' : 'darkseagreen';
            table.deleteRow(0);
            searchBtn.disabled = false;
        }
        function addXMLDiagResult(filename, path, error) {
            var table = document.getElementById('xml-report-table'),
                row = table.insertRow(-1),
                icon = row.insertCell(0),
                desc = row.insertCell(1);
            icon.style.width = '30px';
            if (!error)
                icon.innerHTML = '<img src="http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png" width="24" /> ';
            else
                icon.innerHTML = '<img src="http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-warning-icon.png" width="24" /> ';
            var res = '<div><b>' + filename + '</b><div><div>' + 'Location: ' + '<a onclick="openPath(\"' + path + '\")">' + path + '</a></div>';
            if (error)
                res = res + '<div>' + error + '</div>';
            desc.innerHTML = res + "<hr />";

        }

        function AnalyseModule() {
            var jsonData = JSON.parse(document.getElementById("jsonData").innerText);
            for (var i = 0; i < jsonData.length; i++) {
                DisplayModulesReport(jsonData[i]);
            }
        }
        function DisplayModulesReport(data) {
            var d = document.getElementById("log");
            try {
                var modContainer = document.getElementById('mod-container'),
                    newModContent = document.createElement('div'),
                    modHeader = document.createElement('b'),
                    anchorInHeader = document.createElement('a'),
                    modDetail = document.createElement('div'),
                    modDetailUl = document.createElement('ul'),
                    modDependsUl = document.createElement('ul'),
                    modSubModulesUl = document.createElement('ul');

                try {
                    newModContent.className = (data.Module.Official["@value"]) ? "mod-list-tw" : "mod-list";
                }
                catch (e) {
                    newModContent.className = "mod-list";
                }
                newModContent.className = data.isModLoaded ? newModContent.className : "mod-list-unloaded";
                if (data.isFaultingMod) {
                    newModContent.style.backgroundColor = "lightpink";
                }

                anchorInHeader.innerText = "+ " + data.Module.Name["@value"] + " (version: " + data.Module.Version["@value"] + ")";
                anchorInHeader.href = "#" + data.Module.Id["@value"];

                modDetail.id = data.Module.Id["@value"];
                modDetail.style.display = "none";

                var labelModInformation = document.createElement('div'),
                    modLoadedLi = document.createElement('li'),
                    pdbIncludedLi = document.createElement('li'),
                    modIdLi = document.createElement('li'),
                    modVersionLi = document.createElement('li'),
                    modLocationLi = document.createElement('li'),
                    modManifestLocationLi = document.createElement('li'),
                    labelDependsOn = document.createElement('div'),
                    labelSubModules = document.createElement('div');

                labelModInformation.innerText = "Mod manifest data:";
                modLoadedLi.innerText = (data.isModLoaded) ? "Mod loaded: YES" : "Mod loaded: NO";
                modIdLi.innerText = "Mod Id: " + data.Module.Id["@value"];
                modVersionLi.innerText = "Mod Version: " + data.Module.Version["@value"];
                modLocationLi.innerText = "Mod Location: " + data.location;
                modManifestLocationLi.innerText = "Mod Manifest location: " + data.manifest;
                labelDependsOn.innerText = "Depends on:";
                labelSubModules.innerText = "Submodules:";

                if (!data.Module.DependedModules || !data.Module.DependedModules.DependedModule || Array.isArray(data.Module.DependedModules.DependedModule) && data.Module.DependedModules.DependedModule.length == 0) {
                    var node = document.createElement('li');
                    node.innerText = "Does not depend with other module";
                    modDependsUl.appendChild(node);
                }
                else if (!Array.isArray(data.Module.DependedModules.DependedModule)) {
                    var node = document.createElement('li');
                    if (data.Module.DependedModules.DependedModule)
                        node.innerText = data.Module.DependedModules.DependedModule["@Id"];
                    else
                        node.innerText = "Does not dependwith other module";
                    modDependsUl.appendChild(node);
                }
                else {
                    for (var i = 0; i < data.Module.DependedModules.DependedModule.length; i++) {
                        var node = document.createElement('li');
                        node.innerText = data.Module.DependedModules.DependedModule[i]["@Id"];
                        modDependsUl.appendChild(node);
                    }
                }

                if (!data.Module.SubModules || !data.Module.SubModules.SubModule || !Array.isArray(data.Module.SubModules.SubModule) && data.Module.SubModules.SubModule.length == 0) {
                    var node = document.createElement('li');
                    node.innerText = "Does not contain any DLL module";
                    modSubModulesUl.appendChild(node);
                }
                else if (!Array.isArray(data.Module.SubModules.SubModule)) {
                    var node = document.createElement('li');
                    if (data.Module.SubModules.SubModule.DLLName) {
                        node.innerText = data.Module.SubModules.SubModule.DLLName["@value"];
                    }
                    else
                        node.innerText = "Does not contain any DLL module";
                    modSubModulesUl.appendChild(node);

                }
                else {
                    for (var i = 0; i < data.Module.SubModules.SubModule.length; i++) {
                        var node = document.createElement('li');
                        if (data.Module.SubModules.SubModule[i].isLoadedInMemory) {
                            node.innerText = data.Module.SubModules.SubModule[i].DLLName["@value"];
                        }
                        else {
                            node.innerHTML = "<del>" + data.Module.SubModules.SubModule[i].DLLName["@value"] + "</del> (Not loaded in memory)";
                        }

                        modSubModulesUl.appendChild(node);
                    }
                }


                modDetail.appendChild(labelModInformation);
                modDetailUl.appendChild(modLoadedLi);
                modDetailUl.appendChild(modIdLi);
                modDetailUl.appendChild(modVersionLi);
                modDetailUl.appendChild(modManifestLocationLi);
                modDetail.appendChild(modDetailUl);
                modDetail.appendChild(labelDependsOn);
                modDetail.appendChild(modDependsUl);
                modDetail.appendChild(labelSubModules);
                modDetail.appendChild(modSubModulesUl);

                modHeader.appendChild(anchorInHeader);
                newModContent.appendChild(modHeader);
                newModContent.appendChild(modDetail);

                modContainer.appendChild(newModContent);
                anchorInHeader.onclick = function () {
                    spoiler(anchorInHeader, data.Module.Name["@value"] + "(version: " + data.Module.Version["@value"] + ")", data.Module.Id["@value"]);
                }
            }
            catch (e) {
                alert(e.message + "  " + data.Module.Name["@value"] + "\r\n" + "at js function " + "DisplayModulesReport");
                var d = document.getElementById("log");
                d.innerText = moduleJSON;
            }

        }

        function AnalyseHarmonyPatches() {
            var jsonData = JSON.parse(document.getElementById("harmonyData").innerText)
            for (var methodName in jsonData) {
                DisplayHarmonyRerport(methodName, jsonData[methodName]);
            }
        }

        function GeneratePatchesTable(data) {
            var table = "<table border='1'>" +
                "<tr>" +
                "<th>Prio</th>" +
                "<th>Owner</th>" +
                "<th>ClassName</th>" +
                "<th>AssemblyName</th>" +
                "</tr>" +
                "{replace}" +
                "</table>";
            var rows = "";
            for (var i = 0; i < data.length; i++) {
                var row = "<tr>" +
                    "<td>" + data[i].priority + "</td>" +
                    "<td>" + data[i].owner + "</td>" +
                    "<td>" + data[i].PatchMethod.ClassName + "</td>" +
                    "<td>" + data[i].PatchMethod.AssemblyName + "</td>" +
                    "</tr>";
                rows += row;
            }
            return table.replace("{replace}", rows);

        }

        function DisplayHarmonyRerport(methodName, data) {
            var MethodContainer = document.getElementById('harmony-container'),

                MethodContent = document.createElement('div'),
                MethodHeader = document.createElement('b'),
                AnchorInHeader = document.createElement('a'),
                HarmonyDetailContainer = document.createElement('div'),
                HarmonyPrefixesDiv = document.createElement('div'),
                HarmonyPostfixesDiv = document.createElement('div'),
                HarmonyFinalisersDiv = document.createElement('div'),
                HarmonyTranspilersDiv = document.createElement('div');

            HarmonyDetailContainer.id = methodName;

            if (data.Prefixes.length > 0) {
                var HarmonyPrefixesMainDiv = document.createElement('div'),
                    HarmonyPrefixesDivHeader = document.createElement('b'),
                    HarmonyPrefixesDivAnchorHeader = document.createElement('a');

                HarmonyPrefixesDivHeader.appendChild(HarmonyPrefixesDivAnchorHeader);
                HarmonyPrefixesMainDiv.appendChild(HarmonyPrefixesDivHeader);
                HarmonyPrefixesMainDiv.appendChild(HarmonyPrefixesDiv);
                HarmonyDetailContainer.appendChild(HarmonyPrefixesMainDiv);
                HarmonyPrefixesMainDiv.className = "harmony-list";

                HarmonyPrefixesDiv.id = "Prefix_" + methodName;
                HarmonyPrefixesDiv.style.display = "none";
                HarmonyPrefixesDiv.innerHTML = GeneratePatchesTable(data.Prefixes);

                HarmonyPrefixesDivAnchorHeader.innerText = "+ Prefixes" + " (" + data.Prefixes.length + ")";
                HarmonyPrefixesDivAnchorHeader.href = "#Prefixes" + methodName;
                HarmonyPrefixesDivAnchorHeader.onclick = function () {
                    spoiler(HarmonyPrefixesDivAnchorHeader, "Prefixes " + " (" + data.Prefixes.length + ")", HarmonyPrefixesDiv.id);
                }
            }

            if (data.Postfixes.length > 0) {
                var HarmonyPostfixesMainDiv = document.createElement('div'),
                    HarmonyPostfixesDivHeader = document.createElement('b'),
                    HarmonyPostfixesDivAnchorHeader = document.createElement('a');

                HarmonyPostfixesDivHeader.appendChild(HarmonyPostfixesDivAnchorHeader);
                HarmonyPostfixesMainDiv.appendChild(HarmonyPostfixesDivHeader);
                HarmonyPostfixesMainDiv.appendChild(HarmonyPostfixesDiv);
                HarmonyDetailContainer.appendChild(HarmonyPostfixesMainDiv);
                HarmonyPostfixesMainDiv.className = "harmony-list";

                HarmonyPostfixesDiv.id = "Postfix_" + methodName;
                HarmonyPostfixesDiv.style.display = "none";
                HarmonyPostfixesDiv.innerHTML = GeneratePatchesTable(data.Postfixes);

                HarmonyPostfixesDivAnchorHeader.innerText = "+ Postfixes" + " (" + data.Postfixes.length + ")";
                HarmonyPostfixesDivAnchorHeader.href = "#Postfixes" + methodName;
                HarmonyPostfixesDivAnchorHeader.onclick = function () {
                    spoiler(HarmonyPostfixesDivAnchorHeader, "Postfixes" + " (" + data.Postfixes.length + ")", HarmonyPostfixesDiv.id);
                }
            }

            if (data.Finalisers.length > 0) {
                var HarmonyFinalisersMainDiv = document.createElement('div'),
                    HarmonyFinalisersDivHeader = document.createElement('b'),
                    HarmonyFinalisersDivAnchorHeader = document.createElement('a');

                HarmonyFinalisersDivHeader.appendChild(HarmonyFinalisersDivAnchorHeader);
                HarmonyFinalisersMainDiv.appendChild(HarmonyFinalisersDivHeader);
                HarmonyFinalisersMainDiv.appendChild(HarmonyFinalisersDiv);
                HarmonyDetailContainer.appendChild(HarmonyFinalisersMainDiv);
                HarmonyFinalisersMainDiv.className = "harmony-list";

                HarmonyFinalisersDiv.id = "Finaliser_" + methodName;
                HarmonyFinalisersDiv.style.display = "none";
                HarmonyFinalisersDiv.innerHTML = GeneratePatchesTable(data.Finalisers);

                HarmonyFinalisersDivAnchorHeader.innerText = "+ Finalisers" + " (" + data.Finalisers.length + ")";
                HarmonyFinalisersDivAnchorHeader.href = "#Finalisers" + methodName;
                HarmonyFinalisersDivAnchorHeader.onclick = function () {
                    spoiler(HarmonyFinalisersDivAnchorHeader, "Finalisers" + " (" + data.Finalisers.length + ")", HarmonyFinalisersDiv.id);
                }
            }


            if (data.Transpilers.length > 0) {
                var HarmonyTranspilersMainDiv = document.createElement('div'),
                    HarmonyTranspilersDivHeader = document.createElement('b'),
                    HarmonyTranspilersDivAnchorHeader = document.createElement('a');

                HarmonyTranspilersDivHeader.appendChild(HarmonyTranspilersDivAnchorHeader);
                HarmonyTranspilersMainDiv.appendChild(HarmonyTranspilersDivHeader);
                HarmonyTranspilersMainDiv.appendChild(HarmonyTranspilersDiv);
                HarmonyDetailContainer.appendChild(HarmonyTranspilersMainDiv);
                HarmonyTranspilersMainDiv.className = "harmony-list";

                HarmonyTranspilersDiv.id = "Transpiler_" + methodName;
                HarmonyTranspilersDiv.style.display = "none";
                HarmonyTranspilersDiv.innerHTML = GeneratePatchesTable(data.Transpilers);


                HarmonyTranspilersDivAnchorHeader.innerText = "+ Transpilers" + " (" + data.Transpilers.length + ")";
                HarmonyTranspilersDivAnchorHeader.href = "#Transpilers" + methodName;
                HarmonyTranspilersDivAnchorHeader.onclick = function () {
                    spoiler(HarmonyTranspilersDivAnchorHeader, "Transpilers" + " (" + data.Transpilers.length + ")", HarmonyTranspilersDiv.id);
                }
            }

            HarmonyDetailContainer.style.display = "none";

            var totalPatches = data.Prefixes.length + data.Postfixes.length + data.Transpilers.length + data.Finalisers.length;
            if (totalPatches == 0) return;

            MethodContent.className = "harmony-list"
            AnchorInHeader.innerText = "+ " + methodName + " (" + totalPatches + " patches)";
            AnchorInHeader.href = "#" + methodName;

            MethodHeader.appendChild(AnchorInHeader);
            MethodContent.appendChild(MethodHeader);
            MethodContent.appendChild(HarmonyDetailContainer);
            MethodContainer.appendChild(MethodContent);
            AnchorInHeader.onclick = function () {
                spoiler(AnchorInHeader, methodName + " (" + totalPatches + " patches)", methodName);
            }
        }

        function RecordTakenAction() {
            document.getElementById("takenTroubleshootActions").innerText = JSON.stringify(TroubleshootAction);
        }
        function SavePage() {
            RecordTakenAction();
            var name = window.external.Save();
            if (name) {
                alert("File saved as " + name);
            }
        }
        function OpenTroubleshootSection() {
            var troubleshoot = document.getElementById("troubleshoot");
            spoiler(troubleshoot, "Troubleshoot", "troubleshoot-expanded");
        }

        function CheckDnspy() {
            var dnspyMsg = document.getElementById("dnspyInstall"),
                dnspyButton = document.getElementById("dnspyButton"),
                dnspyInstallLink = document.getElementById("dnspyInstallLink"),
                dnspyReason = document.getElementById("dnspyReason"),
                dnspy = document.getElementById("dnspy");

            if (window.external.IsUnderdebugger()) {
                dnspyInstallLink.style.display = "none";
                dnspyReason.innerHTML = "dnSpy is not available, because the program is already running under debugger."
                dnspy.style.backgroundColor = "lightgoldenrodyellow";
                return;
            }
            if (window.external.IsdnSpyAvailable()) {
                dnspyMsg.style.display = "none";
                dnspyButton.disabled = false;
            }
        }

        function InstallDnspy() {
            var installDnspyOrNot = confirm("Do you want to install dnSpy?")
            if (!installDnspyOrNot) {
                return;
            }
            var dnspyInstallLink = document.getElementById("dnspyInstallLink"),
                dnspyProgressBar = document.getElementById("dnspyProgressbar");
            window.external.InstallDnspy();
            dnspyProgressBar.style.width = "0%";
            dnspyProgressBar.style.backgroundColor = "darkgreen";
            dnspyProgressBar.style.display = "block";
            dnspyProgressBar.innerText = "Downloading...0K/0K";
            dnspyInstallLink.style.display = "none";
        }

        function StartDnspy() {
            var msgbox = confirm("Are you sure to restart the program? Unsaved game and error logs may be lost!");
            if (msgbox) {
                window.external.StartDnspyDebugger();
            }
        }

        function Callback_InstallDnspyProgress(currentPercentage, downloadedTotal, totalSize) {
            var dnspyProgressBar = document.getElementById("dnspyProgressbar"),
                dnspyReason = document.getElementById("dnspyReason");
            dnspyReason.innerText = "dnSpy is being downloaded..."
            currentPercentage = parseInt(currentPercentage);
            downloadedTotal = parseInt(downloadedTotal);
            totalSize = parseInt(totalSize);
            downloadedTotal = Math.ceil(downloadedTotal / 1000);
            totalSize = Math.ceil(totalSize / 1000);
            dnspyProgressBar.style.width = currentPercentage+"%";
            dnspyProgressBar.style.backgroundColor = "darkgreen";
            dnspyProgressBar.style.display = "block";
            dnspyProgressBar.innerText = "Downloading..." + downloadedTotal + "K/" + totalSize + "K";
        }

        function Callback_InstallDnspyComplete(success, errorMessage) {
            var dnspyButton = document.getElementById("dnspyButton"),
                dnspyInstallLink = document.getElementById("dnspyInstallLink"),
                dnspyReason = document.getElementById("dnspyReason"),
                dnspy = document.getElementById("dnspy"),
                dnspyProgressBar = document.getElementById("dnspyProgressbar");

            if (success == "1") {
                dnspyReason.innerText = "dnSpy has been successfully downloaded and installed."
                dnspyProgressBar.style.display = "none";
                dnspyButton.disabled = false;
                return;
            }
            dnspyReason.innerHTML = "Error installing dnspy. Reason: <br />" + "<pre>" + errorMessage + "</pre>";
            dnspyInstallLink.style.display = "block";
            dnspy.style.backgroundColor = "lightgoldenrodyellow";
        }

        function CheckCampaignIsRunning() {
            var emergencySave = document.getElementById("emergency-save"),
                saveReason = document.getElementById("save-reason"),
                savegameButton = document.getElementById("savegameButton");
            if (!window.external.IsCampaignRunning()) {
                emergencySave.style.backgroundColor = "lightgoldenrodyellow";
                saveReason.innerHTML = "This option is not available because the game is not running campaign.";
            }
            savegameButton.disabled = false;
        }

        CheckCampaignIsRunning();
        CheckDnspy();
        AnalyseModule();
        AnalyseHarmonyPatches();
        RecordTakenAction();

    </script>
</body>
</html>